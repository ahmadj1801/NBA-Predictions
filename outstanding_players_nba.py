# -*- coding: utf-8 -*-
"""Outstanding Players - NBA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ne2t1w9-aySEsTZg3Mv5DG4m3D3YLkfe
"""

import numpy as np
import pandas as pd
import sklearn
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.cluster import AffinityPropagation
from sklearn.svm import OneClassSVM

def correlation_diagram(df):
    # Correlation Matrix Heatmap
    f, ax = plt.subplots(figsize=(10, 6))
    corr = df.corr()
    hm = sns.heatmap(round(corr,2), annot=True, ax=ax, cmap="Spectral",fmt='.2f', 
                    linewidths=.05)
    f.subplots_adjust(top=0.93)
    t= f.suptitle('Correlation of Basketball Stats', fontsize=14)

def line_graph(title, x_title, y_title, x, y):
    plt.plot(x, y)
    plt.xlabel(x_title)
    plt.ylabel(y_title)
    plt.title(title) 
    plt.show()

def scatter_plot(title,x, y):
    pass

standard_season = pd.read_csv('/content/drive/MyDrive/COMP721 Project/databasebasketball/player_regular_season.txt')
standard_season = standard_season.groupby(['ilkid', 'year', 'firstname', 'lastname'], as_index=False).sum()
standard_season = standard_season.sort_values('year')
team_standard_season = pd.read_csv('/content/drive/MyDrive/COMP721 Project/databasebasketball/team_season.txt')

all_stars = pd.read_csv('/content/drive/MyDrive/COMP721 Project/databasebasketball/player_allstar.txt')

years = [i for i in range(1946, 2005)]
num_players_per_year = standard_season['year'].value_counts()
num_teams_per_year = team_standard_season['year'].value_counts()


'''SPLIT INTO INDIVIDUAL YEARS'''
original_season_dict = dict()
season_dict = dict()
total = 0
for i in range(len(years)):
    num_players = num_players_per_year[years[i]]
    df = standard_season[total: total + num_players]
    original = df
    df = df.drop(['ilkid', 'year', 'firstname', 'lastname'], axis=1)
    # Add an attribute - Points per game
    df['ppg'] = df['pts'] / df['gp']
    # Add an attribute - Assists per game
    df['apg'] = df['asts'] / df['gp']
    # Add an attribute G/A per game
    df['cpg'] = (df['pts'] + df['asts']) / df['gp']
    # Add attribute - average field goals made
    df['afgm'] = df['fgm'] / df['fga']
    # Add attribute - average free throw made
    df['aftm'] = df['ftm'] / df['fta']
    # Add attribute - average three points made
    df['atpm'] = df['tpm'] / df['tpa']
    # Add attribute - Minutes per game
    df['mpg'] = df['minutes'] / df['gp']
    df = df.fillna(0)
    cols = df.columns
    df = MinMaxScaler().fit_transform(df[cols])
    df = pd.DataFrame(df, columns=cols)
    total += num_players
    season_dict[years[i]] = df
    original_season_dict[years[i]] = original


num_players_per_year = [num_players_per_year[year] for year in years]
num_teams_per_year = [num_teams_per_year[year] for year in years]

correlation_diagram(original_season_dict[2004])
# We can then drop those 6 columns - Highly correlated

line_graph("Number of Players per Year", "Year", "Player Count", years, num_players_per_year)

line_graph("Teams Registered per Year", "Year", "Team Count", years, num_teams_per_year)

from sklearn.cluster import DBSCAN
from sklearn.decomposition import PCA

all_star_names = all_stars.firstname
all_star_surnames = all_stars.lastname

all_stars_03 = all_stars[all_stars['year'] == 2003]

original = original_season_dict[2004]
data = season_dict[2004]
data = data.fillna(0)
print(original_season_dict[2004])
names = original.firstname
surnames = original.lastname


dbscan = DBSCAN(eps=0.005, min_samples=20)
dbscan.fit(data)

pca = PCA(n_components=10).fit(data)
pca_2d = pca.transform(data)

c1 = c2 = c3 = None
for i in range(0, pca_2d.shape[0]):
    if dbscan.labels_[i] == 0:
        c1 = plt.scatter(pca_2d[i, 0], pca_2d[i, 1], c='r', marker='+')
    elif dbscan.labels_[i] == 1:
        c2 = plt.scatter(pca_2d[i, 0], pca_2d[i, 1], c='g', marker='o')
    elif dbscan.labels_[i] == -1:
        c3 = plt.scatter(pca_2d[i, 0], pca_2d[i, 1], c='b', marker='*')
        # print("{} AT ({}, {})\n\n".format(names[i], pca_2d[i, 0], pca_2d[i, 1]))

from sklearn.neighbors import LocalOutlierFactor

all_star_names = all_stars.firstname
all_star_surnames = all_stars.lastname

all_stars_03 = all_stars[all_stars['year'] == 2003]
print(all_stars_03)
original = original_season_dict[2003]
data = season_dict[2003]
data = data.fillna(0)

names = original.firstname.tolist()
surnames = original.lastname.tolist()

clf = LocalOutlierFactor(n_neighbors=100)
pred = clf.fit_predict(data)

pca = PCA(n_components=2).fit(data)
pca_2d = pca.transform(data)

c1 = c2 = c3 = None
for i in range(0, pca_2d.shape[0]):
    if pred[i] == 0:
        c1 = plt.scatter(pca_2d[i, 0], pca_2d[i, 1], c='r', marker='+')
    elif pred[i] == 1:
        c2 = plt.scatter(pca_2d[i, 0], pca_2d[i, 1], c='g', marker='o')
    elif pred[i] == -1:
        c3 = plt.scatter(pca_2d[i, 0], pca_2d[i, 1], c='b', marker='*')

for i in range(len(pred)):
    if pred[i] == -1:
        print(names[i], ' ', surnames[i])

from sklearn.ensemble import IsolationForest
from sklearn.decomposition import PCA

all_star_names = all_stars.firstname.tolist()
all_star_surnames = all_stars.lastname.tolist()

all_stars_03 = all_stars[all_stars['year'] == 2002]

all_stars_id = all_stars_03.ilkid.tolist()
all_star_names = all_stars_03.firstname.tolist() + all_stars_03.lastname.tolist()

original = original_season_dict[2002]
original = original.reset_index()
data = season_dict[2002]
data = data.fillna(0)

names = original.firstname.tolist()
surnames = original.lastname.tolist()

clf = IsolationForest()
pred = clf.fit_predict(data)

pca = PCA(n_components=2).fit(data)
pca_2d = pca.transform(data)

c1 = c2 = c3 = None
for i in range(0, pca_2d.shape[0]):
    if pred[i] == 0:
        c1 = plt.scatter(pca_2d[i, 0], pca_2d[i, 1], c='g', marker='+')
    elif pred[i] == 1:
        c2 = plt.scatter(pca_2d[i, 0], pca_2d[i, 1], c='r', marker='o')
    elif pred[i] == -1:
        c3 = plt.scatter(pca_2d[i, 0], pca_2d[i, 1], c='b', marker='*')  

df = original

correct = 0 
total = 0
for i in range(len(pred)):
    if pred[i] == -1:
        if names[i] in all_star_names:
            correct +=1
        total += 1
    else:
        df = df.drop(i)

print(correct, '/', len(all_stars_03))
print(total)

attributes  = ['pts', 'asts', 'oreb', 'dreb', 'stl', 'blk', 'turnover']
# ['pts', 'oreb', 'dreb', 'asts', 'stl', 'blk', 'turnover','pf', 'fgm', 'ftm', 'tpm'] ['ppg', 'apg', 'mpg', 'spg', 'bpg', 'tpg']# 

score = [0 for i in range(len(df))]
ids = df.ilkid.tolist()
for attribute in attributes:
    sorted_df = df.sort_values(attribute)
    value = 1
    for ind in df.index:
        id = sorted_df['ilkid'][ind]
        id_index = ids.index(id)
        score[id_index] = score[id_index] + value
        value += 1

# Contains all our info that we need on our players
df['scores'] = score
df = df.sort_values('scores', ascending=False)
df = df[df['gp'] < 83]

ids = df.ilkid.tolist()

all_stars_id = [(id.lower()).strip() for id in all_stars_id]
ids = [id.lower() for id in ids]

c = 0
is_all_star = []

for id in ids[0:10]:
    if id in all_stars_id: 
        c += 1
        is_all_star.append('Yes')
    else:
        is_all_star.append('No')

df = df[0:10]
df['is_all_star'] = is_all_star

print('{} of the ten were All Stars in the selected season'.format(c))

print(attributes)

df